pipeline {
  agent {
    kubernetes {
      yaml '''
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: docker
            image: docker:latest
            command:
            - cat
            tty: true
            volumeMounts:
            - mountPath: /var/run/docker.sock
              name: docker-sock
          volumes:
          - name: docker-sock
            hostPath:
              path: /var/run/docker.sock
      '''
    }
  }
  stages {
    stage('Checkout git repo') {
      steps {
        git branch: 'master', url: params.git_repo
      }
    }
    stage('Build and push Docker image') {
      steps {
        container('docker') {
          sh(script: "docker login ${registry_url} -u ${acr_username} -p ${acr_password}", returnStdout: true)
          sh(script: "docker build -t ${registry_url}/customersapi:${BUILD_NUMBER} -f src/CustomersAPI/Dockerfile .", returnStdout: true)
          sh(script: "docker push ${registry_url}/customersapi:${BUILD_NUMBER}", returnStdout: true)
          sh(script: "docker build -t ${registry_url}/customersmvc:${BUILD_NUMBER} -f src/CustomersMVC/Dockerfile .", returnStdout: true)
          sh(script: "docker push ${registry_url}/customersmvc:${BUILD_NUMBER}", returnStdout: true)
        }
      }
    }
    stage('Unit Tests') {
      steps {
        sh 'echo test'
      }
    }
    stage('Browser Tests'){
      steps {
        parallel(
          "Edge":{sh 'echo test'},
          "Firefox":{sh 'echo test'},
          "Chrome":{sh 'echo test'}
        )
      }
    }
    stage('Deploy into k8s') {
      steps {
        sh(script: "cat cicd/k8s.yaml | sed -e 's/build_number/${BUILD_NUMBER}/g' -e 's/YourACRName/${acr_username}/g' | kubectl apply -f - --kubeconfig /var/lib/jenkins/.kube/config", returnStdout: true)
      }
    }
  }
}
